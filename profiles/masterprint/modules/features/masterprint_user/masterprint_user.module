<?php

include_once 'masterprint_user.features.inc';

/**
 * Implements hook_menu()
 */
function masterprint_user_menu() {
  $items = array();
  $items['admin/config/masterprint/password_change'] = array(
    'title' => 'Password Change',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('masterprint_user_password_change_settings'),
    'access arguments' => array('administer site configuration'),
    'weight' => 10,
    'file' => 'masterprint_user.admin.inc',
  );
  $items['user/%user/profile2'] = array(
    'title' => '个人资料',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 90,
  );
  $items['user/%user/profile2/edit'] = array(
    'title' => '修改',
    'access arguments' => array('manage own profile2'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 91,
  );
  $items['user/%user/profile2/edit_account'] = array(
    'title' => '账号编辑',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_profile_form', 1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 92,
    'file path' => drupal_get_path('module', 'user'),
    'file' => 'user.pages.inc',
  );
  $items['profile2/%user/view'] = array(
    'title' => '查看资料',
    'title arguments' => array(1, 'view'),
    'title callback' => 'masterprint_user_profile_title',
    'type' => MENU_CALLBACK,
    'access callback' => 'materprint_user_access_other_profile2',
    'access arguments' => array(1, 'view'),
    'page callback' => 'masterprint_user_view_own_profile2',
    'page arguments' => array(1),
  );
  $items['profile2/%user/edit'] = array(
    'title' => '更新资料',
    'title arguments' => array(1, 'edit'),
    'title callback' => 'masterprint_user_profile_title',
    'type' => MENU_CALLBACK,
    'access callback' => 'materprint_user_access_other_profile2',
    'access arguments' => array(1, 'edit'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('masterprint_user_edit_own_profile2', 1),
  );
  return $items;
}


/**
 * Implements hook_admin_paths_alter().
 */
function masterprint_user_admin_paths_alter(&$paths) {
  $paths['profile2/*/edit'] = TRUE;
}

/**
 * Title callback
 */
function masterprint_user_profile_title($user, $op) {
  $role_rid = masterprint_user_get_masterprint_role($user->uid);
  $role = user_role_load($role_rid);
  $role_name = $role->name;

  $name = masterprint_user_get_profile2_fullname($user->uid);
  if (empty($name)) {
    $name = t('未命名');
  }

  if ($op == 'edit') {
    $title =  t('资料编辑 - !name(!role_name)', array(
        '!role_name' => $role_name, '!name' => $name));
  }
  return $title;
}
/**
 * Implements hook_permission().
 */
function masterprint_user_permission() {
  return array(
    'manage own profile2' => array(
      'title' => t('Manage own profile2'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Access callback
 */
function materprint_user_access_other_profile2($profile_user, $op) {
  global $user;

  if ($user->uid == 1) return TRUE;

  // Get the profile2 type of the user going to be edited
  $profile_type = masterprint_user_get_user_profile_type($profile_user->uid);

  // Get the current user's masterprint role
  $crt_user_rid = masterprint_user_get_masterprint_role($user->uid);
  $crt_user = user_role_load($crt_user_rid);
  $crt_user_role_name = $crt_user->name;

  if ($op == 'edit') {
    switch ($crt_user_role_name) {
      case '管理员':
      case 'AE业务经理':


        // Admin can edit each other's profile2
        if ($crt_user_role_name == '管理员') {
          return TRUE;
        }

        // Admin, AE can  edit 'Client', 'Client dealer', 'Client salesman'
        if (in_array($profile_type , array('client', 'dealer', 'salesman'))) {
          return TRUE;
        }
      case '客户':
        // Client can edit 'dealer' & 'salesman'
        if (in_array($profile_type, array('dealer', 'salesman'))) {
          return TRUE;
        }
      default:
        return false;
    }
  }

  if ($op == 'view') {
    return TRUE;
  }

  return FALSE;
}

/**
 * Check if the user should change password
 */
function masterprint_user_check_user_change_password_status($uid) {
  // An identifier that the user don't need to change password
  $status = FALSE;

  // Check if the user is in the specified role
  $user = user_load($uid);
  $user_roles = !empty($user->roles) ? $user->roles : array();

  $role_settings = variable_get('masterprint_user_password_change_roles', array());
  $change_roles = !empty($role_settings) ? array_filter($role_settings) : array();
  $intersection = array_intersect_key($user_roles, $change_roles);

  if (!empty($intersection)) {
    // Check if the user have changed password
    $result = db_select('masterprint_user_password_change', 'c')
      ->fields('c')
      ->condition('uid', $uid)
      ->condition('status', 1)
      ->execute()
      ->fetchAssoc();

    if (empty($result)) {
      $status = TRUE;
    }
  }
  return $status;
}

/**
 * Implements hook_user_login()
 */
function masterprint_user_login(&$edit, $account) {
  $role_name = '仓储管理员';
  $role = user_role_load_by_name($role_name);
  if (!empty($role->rid)) {


  }

}

/**
 * Implements hook_user_update()
 */
function masterprint_user_update(&$edit, $account, $category) {
  // If the password has been changed, log it
  if ($account->pass != $account->original->pass) {
    masterprint_user_log_password_change($account->uid);
  }
}

/**
 * Log the user has changed his/her password
 */
function masterprint_user_log_password_change($uid) {
  db_merge('masterprint_user_password_change')
    ->key(array('uid' => $uid))
    ->fields(array(
      'changed_date' => REQUEST_TIME,
      'status' => 1,
    ))
    ->execute();
}

/**
 * Implements hook_init()
 */
function masterprint_user_init() {
  global $user;
  $edit_path = 'user/' . $user->uid . '/profile2/edit_account';
  $need_change = masterprint_user_check_user_change_password_status($user->uid);

  if ($need_change) {
    if (current_path() != $edit_path) {
      drupal_goto($edit_path);
    }
    drupal_set_message('请修改密码！');
  }
}

/**
 * Implements hook_form_alter()
 */
function masterprint_user_form_alter(&$form, &$form_state, $form_id) {
  dpm($form);
  global $user;

  if ($form_id == 'user_profile_form') {
    $allowed_roles = array(
      'administrator',
      '管理员',
      'AE业务经理',
    );
    $allowed_rids = array();
    foreach ($allowed_roles as $allowed_role) {
      $role_obj = user_role_load_by_name($allowed_role);
      if (!empty($role_obj->rid)) {
        $allowed_rids[$role_obj->rid] = $role_obj->name;
      }
    }
    $user_roles = !empty($user->roles) ? $user->roles : array();
    // For admin & ae, show the whole list
    $intersection = array_intersect_key($allowed_rids, $user_roles);

    if (empty($intersection) || $user->uid !== 1) {
      unset($form['field_created_by']);
      unset($form['signature_settings']);
      unset($form['contact']);
    }

    unset($form['locale']);
    unset($form['locale']['language']);
  }

  // For client, hide the 'field_dealer_client_owner' field, and set it as the
  // current client
  if ($form_id == 'masterprint_dealer_add_dealer_form') {
    if (masterprint_user_is_user_client($user->uid)) {
      $form['profile_dealer']['field_dealer_client_owner']['und']['#default_value'] = $user->uid;
      $form['profile_dealer']['field_dealer_client_owner']['#attributes']['style'][] = 'display:none;';
    }
  }
  if ($form_id == 'masterprint_salesman_add_salesman_form') {
    if (masterprint_user_is_user_client($user->uid)) {
      $form['profile_salesman']['field_salesman_client_owner']['und']['#default_value'] = $user->uid;
      $form['profile_salesman']['field_salesman_client_owner']['#attributes']['style'][] = 'display:none;';
    }
  }

  // For client dealer and client salesman, hide the client field
  if ($form_id == 'masterprint_user_edit_own_profile2') {
    if (masterprint_user_is_client_dealer($user->uid)) {
      if (!empty($form['profile_dealer']) && !empty($form['profile_dealer']['field_dealer_client_owner'])) {
        $form['profile_dealer']['field_dealer_client_owner']['#attributes']['style'][] = 'display:none;';
      }
    }

    if (masterprint_user_is_client_salesman($user->uid)) {
      if (!empty($form['profile_salesman']) && !empty($form['profile_salesman']['field_salesman_client_owner'])) {
        $form['profile_salesman']['field_salesman_client_owner']['#attributes']['style'][] = 'display:none;';
      }
    }
  }
}

/**
 * Implements hook_menu_alter()
 */
function masterprint_user_menu_alter(&$items) {
  $items['user/%user/edit']['access callback'] = FALSE;

  $items['user/%user/view']['type'] = MENU_CALLBACK;

  $items['user/%user']['title'] = '个人资料';
  $items['user/%user']['access callback'] = TRUE;
  $items['user/%user']['page callback'] = 'drupal_get_form';
  $items['user/%user']['page arguments'] = array('masterprint_user_edit_own_profile2', 1);
}

/**
 * Access check.
 */
function masterprint_user_edit($account) {
  $access = (($GLOBALS['user']->uid == $account->uid) || user_access('administer users')) && $account->uid > 0;
  return $access || user_is_admin();
}

/**
 * Page callback for displaying profile2
 */
function masterprint_user_view_own_profile2($user) {
  if (substr(current_path(), 0, strlen('profile2')) == 'profile2') {
    //menu_set_active_item('user/5/dealer');
  }

  $output = '';

  // Get the current user's role
  $types = array(
    'admin' => '管理员',
    'ae' => 'AE业务经理',
    'client' => '客户',
    'dealer'=> '客户的经销商',
    'salesman' => '客户销售人员',
    'stock_keeper' => '仓储管理员',
  );
  $intesection = array();
  if (!empty($user->roles)) {
    $intesection = array_intersect($types, $user->roles);
  }

  if (!empty($intesection)) {
    reset($intesection);
    $type = key($intesection);

    $profile = profile2_load_by_user($user, $type);

    if (!$profile) {
      $profile = profile2_create(array('type' => $type));
      $profile->setUser($user);
      $profile->is_new = TRUE;
    }
    unset($profile->label);
    $result = $profile->view('page');
    $output .= drupal_render($result);
  }

  return $output;
}

/**
 * Page callback for editing profile2
 */
function masterprint_user_edit_own_profile2($form, &$form_state, $user) {
  $output = '';

  // Get the current user's role
  $types = array(
    'admin' => '管理员',
    'ae' => 'AE业务经理',
    'client' => '客户',
    'dealer'=> '客户的经销商',
    'salesman' => '客户销售人员',
    'stock_keeper' => '仓储管理员',
  );
  $intesection = array();
  if (!empty($user->roles)) {
    $intesection = array_intersect($types, $user->roles);
  }

  if (!empty($intesection)) {
    reset($intesection);
    $type = key($intesection);

    $profile = profile2_load_by_user($user, $type);

    if (!$profile) {
      $profile = profile2_create(array('type' => $type));
      $profile->setUser($user);
      $profile->is_new = TRUE;
      //unset($profile->label);
    }
    $form['profile_type'] = array(
      '#type' => 'value',
      '#value' => $type,
    );
    $form['profile_user'] = array(
      '#type' => 'value',
      '#value' => $user,
    );
    $form['profile_' . $type] = array(
      '#type' => 'fieldset',
      //'#title' => t(''),
    );
    $form_state['profile2_skip_hook'] = TRUE;
    $form_state['profiles'][$type] = $profile;

    field_attach_form('profile2', $profile, $form['profile_' . $type], $form_state);
  }



  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('提交'),
    '#weight' => 40,
  );
  return $form;
}

/**
 * Validation handler
 */
function masterprint_user_edit_own_profile2_validate(&$form, &$form_state) {
  $values = $form_state['values'];
  $type = $values['profile_type'];

  if (isset($form_state['values']['profile_' . $type])) {
    // @see entity_form_field_validate()
    $pseudo_entity = (object) $form_state['values']['profile_' . $type];
    $pseudo_entity->type = $form[$type];
    field_attach_form_validate('profile2', $pseudo_entity, $form['profile_' . $type], $form_state);
  }
}

/**
 * Submission handler
 */
function masterprint_user_edit_own_profile2_submit(&$form, &$form_state) {
  $values = $form_state['values'];
  $type = $values['profile_type'];

  // Save profile2 fields
  profile2_form_submit_build_profile($form, $form_state);
  // This is needed as some submit callbacks like user_register_submit() rely on
  // clean form values.
  profile2_form_submit_cleanup($form, $form_state);
  $profile = $form_state['profiles'][$type];
  //$profile->uid = $form_state['values']['profile_user']->uid;
  profile2_save($profile);

  drupal_set_message(t('资料更新成功！'));
}

function masterprint_user_get_client_dealer($uid) {

}

function masterprint_user_get_client_salesman($uid) {

}

/**
 * Check if a user is a client
 */
function masterprint_user_is_user_client($uid) {
  $user = user_load($uid);
  $user_roles = (!empty($user->roles)) ? $user->roles : array();
  $client_role = user_role_load_by_name('客户');
  if (!empty($client_role->rid)) {
    if (array_key_exists($client_role->rid, $user_roles)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Check if a user is a client dealer
 */
function masterprint_user_is_client_dealer($uid) {
  $user = user_load($uid);
  $user_roles = (!empty($user->roles)) ? $user->roles : array();
  $client_role = user_role_load_by_name('客户的经销商');
  if (!empty($client_role->rid)) {
    if (array_key_exists($client_role->rid, $user_roles)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Check if a user is a client
 */
function masterprint_user_is_client_salesman($uid) {
  $user = user_load($uid);
  $user_roles = (!empty($user->roles)) ? $user->roles : array();
  $client_role = user_role_load_by_name('客户销售人员');
  if (!empty($client_role->rid)) {
    if (array_key_exists($client_role->rid, $user_roles)) {
      return TRUE;
    }
  }
  return FALSE;
}


/**
 * Get the profile2 type the user is binding to
 */
function masterprint_user_get_user_profile_type($uid) {
  $user = user_load($uid);

  $mp_role_rid = masterprint_user_get_masterprint_role($uid);
  $mp_role = user_role_load($mp_role_rid);
  $mp_role_name = $mp_role->name;

  $type_mapping = array(
    '管理员' => 'admin',
    'AE业务经理' => 'ae',
    '客户' => 'client',
    '客户的经销商' => 'dealer',
    '客户销售人员' => 'salesman',
    '仓储管理员' => 'stock_keeper',
  );

  if (array_key_exists($mp_role_name, $type_mapping)) {
    return $type_mapping[$mp_role_name];
  }

  return FALSE;
}

/**
 * Get user's role in masterprint (excluding 'authenticated user')
 */
function masterprint_user_get_masterprint_role($uid) {
  $user = user_load($uid);

  if (!empty($user->roles)) {
    $roles = $user->roles;

    $mp_roles = array();
    foreach ($roles as $rid => $name) {
      if ($name == 'authenticated user') continue;
      $mp_roles[$rid] = $name;
    }

    if (!empty($mp_roles)) {
      reset($mp_roles);
      return key($mp_roles);
    }
    return FALSE;
  }
}

/**
 * Get a user's name in the profile2
 */
function masterprint_user_get_profile2_fullname($uid) {
  $profile2_type = masterprint_user_get_user_profile_type($uid);

  $user = user_load($uid);
  $profile2 = profile2_load_by_user($uid);

  if (!empty($profile2[$profile2_type])) {
    // Different profile types use different fields:
    // Admin    - field_fullname
    // AE       - field_fullname
    // Client   - field_client_name
    // Salesman - field_salesman_name
    // Dealer   - field_salesman_name

    $field_name = '';
    switch ($profile2_type) {
      case 'admin':
      case 'ae':
        $field_name = 'field_fullname';
        break;
      case 'client':
        $field_name = 'field_client_name';
        break;
      case 'salesman':
        $field_name = 'field_salesman_name';
        break;
      case 'dealer':
        $field_name = 'field_salesman_name';
        break;
    }

    if ((!empty($field_name)) && (!empty($profile2[$profile2_type]->$field_name))) {
      $profile = $profile2[$profile2_type]->$field_name;
      if (!empty($profile['und'][0]['value'])) {
        return $profile['und'][0]['value'];
      }
    }
  }

  return FALSE;
}

/**
 * Implements hook_token_info().
 */
function masterprint_user_token_info() {
  $info['tokens']['user']['password'] = array(
    'name' => t('User password'),
    'description' => t('Provides user password. May be used only during registration.'),
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function masterprint_user_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if (isset($data['user']) && isset($data['user']->pass)) {
    $replacements['[user:password]'] = $data['user']->pass;
  }
  return $replacements;
}
