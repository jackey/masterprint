<?php

// @todo: it's not safe to set role ids like this
define('SALER_ROLE_ID', 8);
define('DEALER_ROLE_ID', 7);
define('CLIENT_ROLE_ID', 6);
define('WAREHOUSE_ROLE_ID', 5);
define('AE_ROLE_ID', 3);
define('ADMIN_ROLE_ID', 9);

define('ADDRESS_SPLITER', '------------');
define("PRODUCT_APPLYING", 0);
define("PRODUCT_PASSED", 1);
define("PRODUCT_SENT", 2);
define("PRODUCT_REFUSED", 3);

// Email template
define('submit_product_apply', 'notify_on_product_request'); //'经销商/销售员申请产品提醒
define('notify_warehouse_manager_when_approve', 'notify_on_product_accepted');//产品被客户通过邮件
define('notify_client_when_delivery', 'notify_client_on_delivery');//仓库管理员发出产品后致客户提醒邮件
define('notify_apply_account_when_delivery', 'notify_requester_on_delivery');//仓库管理员发出产品后致产品申请人邮件
define('notify_warehouse_when_product_insert', 'notify_warehouse_when_product_insert');//产品被添加后致仓库管理员邮件
define('notify_warning_when_product_less', 'notify_on_nearly_out_of_stock');//库存告警邮件
define('notify_user_when_refused_apply', 'notify_user_when_refused_apply'); //申请的产品审核拒绝
define('notify_client_when_product_insert', 'notify_stock_keeper_on_product_added');//产品被添加后致客户邮件

/**
 * Implements hook_menu().
 */
function masterprint_apply_menu() {
  $items = array();
  $items['user/%user/applyproduct/list'] = array(
    'title' => '产品申请',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('apply product'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('masterprint_apply_product', '1'),
  );
  $items['user/%user/applyproduct/new'] = array(
    'title' => '申请列表',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['user/%user/applyproduct'] = array(
    'title' => '申请管理',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'user_product_apply_list',
    'page arguments' => array('1'),
    'access arguments' => array('view apply'),
    'weight' => 200,
  );
  $items['approve/%/%'] = array(
    'title' => '产品申请通过',
    'type' => MENU_CALLBACK,
    'access arguments' => array('approve apply'),
    'page callback' => 'client_approve_apply',
    'page arguments' => array(1, 2)
  );
  $items['frused-approve/%'] = array(
    'title' => '产品申请拒绝',
    'type' => MENU_CALLBACK,
    'access arguments' => array('approve apply'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('refused_product_apply_form', 1)
  );
  $items['user/%/applydetail/%'] = array(
    'title' => '申请详情',
    'type' => MENU_CALLBACK,
    'access arguments' => array('view apply'),
    'page callback' => 'page_show_apply_detail',
    'page arguments' => array(1, 3),
  );
  $items['warehousr_manager/%/ensure/%'] = array(
    'title' => '确认发货',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('page_delivery_product_sure'),
  );
  // print/[product_id]?company_id=[]&delivery_no=[]&company_phone=[]&company_name=[]
  $items['print/%'] = array(
    'title' => '打印',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'page callback' => 'theme_product_apply_print',
    'page arguments' => array(1),
  );
  return $items;
}

//输出打印页面内容
function theme_product_apply_print($apply_id) {
  $company_id = $_GET['company_id'];
  if ($company_id == 'other') {
    $company_phone = $_GET['company_phone'];
    $company_name = $_GET['company_name'];
  }
  $delivery_info = $_GET['delivery_no'];
  $product_apply = load_apply_pruduct($apply_id);
  $delivery_company = node_load($company_id);
  $product = node_view(node_load($product_apply['product_id']));
  $user = user_view(user_load($product_apply['uid']));
  if ($delivery_company) {
    $view_delivery_company = node_view($delivery_company);
  }
  else {
    $view_delivery_company = array(
      '#markup' => '<div id="node-4" class="node node-delivery-company clearfix">
        <h2>
          '.$company_name.'
        </h2>
  <div class="content clearfix">
    <div class="field field-name-field-phone-number field-type-text field-label-inline clearfix"><div class="field-label">电话号码:&nbsp;</div><div class="field-items"><div class="field-item even">'.$company_phone.'</div></div></div>  </div>
</div>'
    );
  }
  hide($user['summary']);

  return theme('productapply_print', array(
    'product' => $product, 
    'apply' => $product_apply, 
    'user' => $user,
    'delivery_no' => $delivery_info,
    'delivery_company' => $view_delivery_company));
}

/** 
 * Refused product apply form.
 */
function refused_product_apply_form($un_used, $un_used, $product_id) {
  return array(
    'refused_reason' => array(
      '#type' => 'textfield',
      '#title' => t('拒绝理由'),
      '#default_value' => t('库存不足？'),
    ),
    'product_id' => array(
      '#type' => 'hidden',
      '#value' => $product_id
    ),
    'button' => array(
      '#type' => 'submit',
      '#value' => t('拒绝'),
    ),
  );
}

function refused_product_apply_form_submit($form, $form_state) {
    //审核状态拒绝
    db_update("product_apply")
      ->fields(array('status' => PRODUCT_REFUSED, 'refused_reseaon' => $form_state['values']['refused_reason']))
      ->condition('id', $form_state['values']['product_id'], '=')
      ->execute();
    $product_apply = load_apply_pruduct($form_state['values']['product_id']);
    $uid = $product_apply['uid'];
    $apply_user = user_load($uid);
    //产品被拒绝后需要给邮件提醒到申请人
    pet_send_mail(notify_user_when_refused_apply, 
      array('mail' => $apply_user->mail, 'uid' => $apply_user->uid), 
      array('nid' => $product_apply['product_id'], 'refused_reason' => $form_state['values']['refused_reason'])
    );

    $form_state['redirect'] = '<front>';
    drupal_redirect_form($form_state);
}

/**
 * 创建产品后 邮件通知仓库管理员.
 * Implements hook_form_alter()
 */
function masterprint_apply_form_alter(&$form, &$form_state, $form_id) {
  // $form['send_warehouse_manager'] = array(
  // 	'#title' => '发送给仓库管理员',
  // 	'#type' => 'checkbox',
  // 	'#option' => array(1 => '发送'),
  // 	'#required' => TRUE,
  // 	'#default_value' => '1',
  // 	'#weight' => 10
  // );

  if ($form_id == 'product_node_form') {
    global $user;
    $form['field_product_stock']['#access'] = FALSE;
    if (user_is_client($user)) {
      $form['field_product_applied_by']['#access'] = FALSE;
      $form['field_product_applied_by'][LANGUAGE_NONE]['#default_value'] = $user->uid;
    }
  }
}

/**
 * hook_node_insert()
 */
function masterprint_apply_node_insert($node) {
  if ($node->type == 'product') {
    //成功添加产品后，需要告之仓库管理员入库
    $managers = list_warehouse_manager();
    foreach ($managers as $manager) {
      pet_send_mail(notify_warehouse_when_product_insert, array('mail' => $manager->mail, 'uid' => $manager->uid), array('nid' => $node->nid));
    }
    //产品添加后要通知客户
    $user = user_load($node->field_product_applied_by[LANGUAGE_NONE][0]['target_id']);
    pet_send_mail(notify_client_when_product_insert, array('mail' => $user->mail, 'uid' => $user->uid), array('nid' => $node->uid));
  }
}

/**
 * The form used for delivering the product as requested.
 */
function page_delivery_product_sure() {
  $apply_id = arg(1);
  $access_key = arg(3);
  $apply_product = db_select('product_apply', 'ap')
    ->fields('ap')
    ->condition('id', $apply_id, '=')
    ->execute()
    ->fetchAssoc();
  if (!$apply_product) {
     return array(
       'error' => array('#markup' => t('申请没有找到')),
     );
  }
  $product = node_load($apply_product['product_id']);
  $form = array();
  $render_product = node_show($product);
  $form['product_display'] = array(
    '#markup' => drupal_render($render_product)
  );
  $address = explode(ADDRESS_SPLITER, $apply_product['address']);
  $address_str = array();
  foreach ($address as $add) {
    $address_str[] = '<span class="address">'.$add.'</span>';
  }
  $form['address'] = array(
    '#markup' => t('送货地址')."':". implode("</br>", $address_str),
  );
  $form['product_request_count'] = array(
    '#markup' => '</br><span class="product_request_count">' . t('产品申请数量: %stock', array('%stock' => $apply_product['count'])). '</span></br>',
  );

  $form['product_count'] = array(
    '#title' => t('发货数量'),
    '#type' => 'hidden',
    '#maxlength' => 12,
    '#default_value' => $apply_product['count'],
    '#size' => 12,
    '#description' => t('只能填写数字'),
  );

  // Delivery information
  $form['delivery_info'] = array(
    '#type' => 'fieldset',
    '#title' => t('物流信息'),
  );

  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'delivery_company')
    ->execute();
  if (!empty($entities['node'])) {
    $companies =  node_load_multiple(array_keys($entities['node']));
  }
  $options = array();
  foreach ($companies as $company) {
    $options[$company->nid] = $company->title;
  }
  $options['other'] = t('其他物流');

  $form['delivery_info']['delivery_company'] = array(
    '#type' => 'select',
    '#title' => t('物流公司'),
    '#options' => $options,
  );

  // // A conditional field let the user to specify other company
  $form['delivery_info']['delivery_company_other'] = array(
    '#type' => 'textfield',
    '#title' => t('其他物流公司:'),
    '#description' => t('如果你所选择的快递公司不在上面列表中，请在此输入。'),
    '#states' => array(
      'visible' => array(
        'select[name="delivery_company"]' => array('value' => 'other'),
      ),
    ),
  );

    $form['delivery_info']['delivery_company_phone'] = array(
    '#type' => 'textfield',
    '#title' => t('电话号码'),
    '#description' => t('如果你所选择的快递公司不在上面列表中，请在此输入。'),
    '#states' => array(
      'visible' => array(
        'select[name="delivery_company"]' => array('value' => 'other'),
      ),
    ),
  );

  $form['delivery_info']['delivery_serial_no'] = array(
    '#type' => 'textfield',
    '#title' =>  t('运单号码'),
    '#required' => TRUE,
  );

  $form['product_stock'] = array(
    '#markup' => '<span class="product-stock-element">' . t('产品库存: %stock', array('%stock' => get_product_stock_number($product))). '</span></br>',
  );

  $form['apply_id'] = array(
    '#type' => 'hidden',
    '#default_value' => $apply_id
  );
  if ($apply_product['status'] != PRODUCT_SENT) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('确认发货'),
    );
  }


  $form['print'] = array(
    '#markup' => l(t('打印'), 'print/'.$apply_id, array('attributes' =>array('target' => 'blank', 'id' => 'print_link'))),
  );
  return $form;
}

/**
 * Validation handler for form #page_delivery_product_sure
 */
function page_delivery_product_sure_validate($form, &$form_state) {
  if (!is_numeric($form_state['values']['product_count'])) {
    form_set_error('product_count', t('发货数量 只能填写数字'));
  }
  $apply_id = $form_state['values']['apply_id'];

  //TODO:发送邮件给客户/申请人
  $apply_product = db_select('product_apply', 'ap')
    ->fields('ap')
    ->condition('id', $apply_id, '=')
    ->execute()
    ->fetchAssoc();
  $product = node_load($apply_product['product_id']);
  $stock_number = get_product_stock_number($product);
  if ($stock_number < $form_state['values']['product_count']) {
    form_set_error('product_count', t('抱歉：库存不足!'));
  }
}

// 返回产品的库存
function get_product_stock_number($product) {
  $total_count = $product->field_product_count[LANGUAGE_NONE][0]['value'];
  if (!$total_count) {
    return 0;
  }
  else {
    $result = db_query("SELECT SUM(count) as cost_total FROM {product_apply} WHERE product_id = ? AND status = ?", array($product->nid, PRODUCT_SENT))->fetchAssoc();
    $cost_total = $result['cost_total'];
    return ($total_count - $cost_total > 0) ? ($total_count - $cost_total) : 0;
  }
}

/**
 * 返回在产品列表上的库存
 */
function get_product_stock_number_value_on_product_list($product) {
  $total_count = $product->field_product_count[LANGUAGE_NONE][0]['value'];
  if (!$total_count) {
    return 0;
  }
  else {
    $result = db_query("SELECT SUM(count) as cost_total FROM {product_apply} WHERE product_id = ? AND status in (?, ?, ?)", 
      array($product->nid, PRODUCT_APPLYING, PRODUCT_PASSED, PRODUCT_SENT))->fetchAssoc();
    $cost_total = $result['cost_total'];
    return ($total_count - $cost_total > 0) ? ($total_count - $cost_total) : 0;
  }
}

/**
 * Submission handler for form #page_delivery_product_sure
 */
function page_delivery_product_sure_submit($form, &$form_state) {
  $values = $form_state['values'];

  // $delivert_companies = array(
  //   'yuantong' => '圆通',
  //   'shentong' => '申通',
  //   'yunda' => '韵达',
  //   'tiantian' => '天天快递',
  //   'shunfeng' => '顺丰',
  // );

  // Gather the right delivery company
  if (!empty($values['delivery_company']) && $values['delivery_company'] == 'other') {
    $new_delivery_company = $values['delivery_company_other'];
    $new_delivery_phone = $values['delivery_company_phone'];
    //自动保存新添加的物流公司
    global $language;
    $node = (Object)null;
    $node->type = 'delivery_company';
    node_object_prepare($node);
    $node->title = $new_delivery_company;
    $node->language = $language->language;
    $node->field_phone_number[LANGUAGE_NONE][0]['value'] = $new_delivery_phone;
    $node->uid = 1;
    $node->status = 1;
    node_save($node);
    $delivery_company = $node->nid;
  }
  else {
    $delivery_company = $values['delivery_company'];
  }

  $apply_id = $form_state['values']['apply_id'];
  //更新申请状态/更新发货数量
  db_update("product_apply")
      ->fields(array(
        'sent_count' => $form_state['values']['product_count'],
        'status' => PRODUCT_SENT,
        'approve_time' => time(),
        'delivery_company' => $delivery_company,
        'delivery_serial_no' => $values['delivery_serial_no'],))
        // 'delivery_contact_tel' => $values['delivery_contact_tel'],))
      ->condition('id', $apply_id, '=')
      ->execute();
  $apply_product = db_select('product_apply', 'ap')
    ->fields('ap')
    ->condition('id', $apply_id, '=')
    ->execute()
    ->fetchAssoc();

  //申请人ID.
  $uid = $apply_product['uid'];
  $product = node_load($apply_product['product_id']);
  $apply_account = user_load($uid);
  pet_send_mail(notify_apply_account_when_delivery,
    array('mail' => $apply_account->mail, 'uid' => $apply_account->uid),
    array('nid' => $apply_product['product_id'])
  );

  //客户ID
  $client_account = get_client_account_from_user($apply_account);
  //发邮件给客户
  pet_send_mail(notify_apply_account_when_delivery,
    array('mail' => $client_account->mail, 'uid' => $client_account->uid),
    array('nid' => $apply_product['product_id']));

  //发货后，检查库存，如果库存少于20个则发送邮件给对应的客户和AE
  $product_stock = get_product_stock_number($product);
  $total_count = $product->field_product_count[LANGUAGE_NONE][0]['value'];
  if (round($product_stock / $total_count, 1) < 0.2) {
    pet_send_mail(notify_warning_when_product_less, array('mail' => $client_account->mail, 'uid' => $client_account->uid),
      array('nid' => $apply_product['product_id']));

    //发邮件给AE
    $ae_accounts = list_ae_account();
    foreach ($ae_accounts as $ae) {
      pet_send_mail(notify_warning_when_product_less, array('mail' => $ae->mail, 'uid' => $ae->uid), array(
        'nid' => $apply_product['product_id']
      ));
    }
  }

  //发邮件给AE
  $ae_accounts = list_ae_account();
  foreach ($ae_accounts as $ae) {
    pet_send_mail(notify_apply_account_when_delivery, array('mail' => $ae->mail, 'uid' => $ae->uid), array(
      'nid' => $apply_product['product_id']
    ));
  }

  require_once(drupal_get_path('module', 'user').'/user.pages.inc');
  if (user_is_logged_in()) {
    user_logout();
  }
  drupal_goto('<front>');
}

function masterprint_apply_pet_substitutions_alter(&$substitutions, &$params) {
  $apply_id = isset($params['pet_cc']) ? $params['pet_cc']: '';
  if (!empty($apply_id)) {
    $apply = load_apply_pruduct($apply_id);

    $substitutions['apply'] = (object)$apply;
    unset($params['pet_cc']);
  }
}

function page_show_apply_detail($uid, $id) {
  $apply_product = db_select('product_apply', 'ap')
    ->fields('ap')
    ->condition('id', $id, '=')
    ->execute()
    ->fetchAssoc();

  $product = node_load($apply_product['product_id']);
  if($product) {
    $breadcrumbs = array();
    $breadcrumbs[] = l(t('网站'), '<front>');
    $breadcrumbs[] = l(t('用户'), 'user');
    $breadcrumbs[] = l(t('申请列表'), 'user/'.$uid.'/applyproductlist');
    drupal_set_breadcrumb($breadcrumbs);

    return theme('productapply', array('product' => $product, 'apply' => $apply_product));
  }
  else {
    return array('#markup' => t('网站出现未知错误，请联系管理员'));
  }

}

/**
 * Implements hook_theme().
 */
function masterprint_apply_theme() {
  $hooks = array();
  $hooks['productapply'] = array(
    'variables' => array('product' => new stdclass, 'apply' => array()),
    'template' => 'productapply',
  );
  $hooks['productapply_print'] = array(
    'variables' => array('product' => NULL, 'apply' => NULL, 'user' => NULL),
    'template' => 'productapply_print',
  );
  return $hooks;
}

function masterprint_apply_process_productapply(&$vars) {
  $vars['product_view'] = node_view($vars['product']);
  $company = node_load($vars['apply']['delivery_company']);
  if ($company) {
    $vars['delivery_company_view'] = node_view(node_load($vars['apply']['delivery_company']));
  }
  else {
    $vars['delivery_company_view'] = array('#markup' => ''); 
  }
}

function client_approve_apply($id, $action = 'pass') {
  if ($action == 'pass') {
    //审核状态通过
    db_update("product_apply")->fields(array('status' => 1))->condition('id', $id, '=')->execute();
    $apply_product = db_select('product_apply', 'ap')
      ->fields('ap')
      ->condition('id', $id, '=')
      ->execute()
      ->fetchAssoc();
    // 需要通知仓库管理员
    $warehousr_manager = list_warehouse_manager();
    foreach ($warehousr_manager as $uid => $user) {
      pet_send_mail(notify_warehouse_manager_when_approve, array('mail' => $user->mail, 'uid' => $user->uid),
        array('nid' => $apply_product['product_id'], 'cc' => $id));
    }

    $product = node_load($apply_product['product_id']);
    //发货后，检查库存，如果库存少于20个则发送邮件给对应的客户和AE
    $product_stock = get_product_stock_number_value_on_product_list($product);
    $total_count = $product->field_product_count[LANGUAGE_NONE][0]['value'];
    if ($product_stock / $total_count <= 0.2) {
        //客户ID
      $apply_account = user_load($apply_product['uid']);
      $client_account = get_client_account_from_user($apply_account);
      pet_send_mail(notify_warning_when_product_less, array('mail' => $client_account->mail, 'uid' => $client_account->uid),
        array('nid' => $apply_product['product_id']));

      //发邮件给AE
      $ae_accounts = list_ae_account();
      foreach ($ae_accounts as $ae) {
        pet_send_mail(notify_warning_when_product_less, array('mail' => $ae->mail, 'uid' => $ae->uid), array(
          'nid' => $apply_product['product_id']
        ));
      }
    }
    
    drupal_goto($_SERVER['HTTP_REFERER']);
    return '';
  }
  else if ($action == 'refused'){
    //审核状态拒绝
    db_update("product_apply")->fields(array('status' => PRODUCT_REFUSED))->condition('id', $id, '=')->execute();
    drupal_goto($_SERVER['HTTP_REFERER']);
    return '';
  }
}

function load_apply_pruduct($id) {
  return db_select('product_apply', 'ap')
    ->fields('ap')
    ->condition('id', $id)
    ->execute()
    ->fetchAssoc();
}

/**
 * Implements hook_token_info().
 */
function masterprint_apply_token_info() {
  $type = array(
    'name' => t('Product apply'),
    'description' => t('用户产品申请'),
    'needs-data' => 'apply',
  );
  $apply['id'] = array(
    'name' => t("Apply ID"),
    'description' => t("申请的产品ID."),
  );
  $apply['refused_reason'] = array(
    'name' => t(' Refused Reason'),
    'description' => t('审核拒绝原因'),
  );

  return array(
    'types' => array('apply' => $type),
    'tokens' => array('apply' => $apply),
  );
}

function masterprint_apply_tokens($type, $tokens, array $data = array(), array $options = array()) {
  if ($type == 'apply') {
    $apply = $data['apply'];
    foreach ($tokens as $name => $origin) {
      $replacements[$origin] = $apply->{$name};
    }

    return $replacements;
  }
}

function user_product_apply_list($user) {
  $user = user_load(arg(1));
  $search_uids = array();
  if (user_is_saler($user) || user_is_dealer($user)) {
    $search_uids[] = $user->uid;
  }
  else {
    $query = db_query("select * from field_revision_field_dealer_client_owner left join profile on entity_id=pid where field_dealer_client_owner_target_id=:uid", array(':uid' => $user->uid));
    while ($row = $query->fetchAssoc()) {
      $search_uids[] = $row['uid'];
    }
    $query = db_query("select * from field_revision_field_salesman_client_owner left join profile on entity_id=pid where field_salesman_client_owner_target_id=:uid", array(':uid' => $user->uid));
    while ($row = $query->fetchAssoc()) {
      $search_uids[] = $row['uid'];
    }
  }

  if ($search_uids == array()) {
    $query = db_select("product_apply", 'pa')->fields('pa')->execute();
  }
  else {
    $query = db_select("product_apply", 'pa')->fields('pa')->condition('uid', $search_uids, 'in')->execute();
  }
  $header = array(t('产品名称'), t('申请时间'), t('申请数量'), t('产品缩略图'), t('申请人'),  t('申请状态'));
  if (user_access('approve apply')) {
    $header[] = t('操作');
  }

  $apply_product = array();
  $table_rows = array();
  while ($data = $query->fetchAssoc()) {
    $op = '';
    if ($data['status'] == PRODUCT_APPLYING) {
      $op .= l(t('通过'), 'approve/'.$data['id'].'/pass');
      $op .= '|'. l(t('拒绝'), 'frused-approve/'.$data['id']);
    }
    else if ($data['status'] == PRODUCT_PASSED){
      $op = '<span>'.t('已通过').'</span>';
    }
    else if ($data['status'] == PRODUCT_REFUSED) {
      $op = '<span>'.t('已拒绝').'</span>';
    }
    else if ($data['status'] == PRODUCT_SENT) {
      $op = '<span>'.t('已发出').'</span>';
    }
    $op .= '|'.l(t('产品详情'), 'user/'.arg(1).'/applydetail/'. $data['id']);
    if (!user_access('approve apply')) {
      $op = t('无');
    }
    $node = node_load($data['product_id']);
    $thumbnail_url = count($node->field_product_thumbnail) > 0 ? file_create_url($node->field_product_thumbnail[LANGUAGE_NONE][0]['uri']) : "";
    if (!$thumbnail_url) {
      $product_thumbnail_render = t('暂无');
    }
    else {
      $product_thumbnail_render = '<a class="showProductThumbnail" href="'.$thumbnail_url.'" rel="lightbox">缩略图</a>';
    }
    $status = t('待审核');
    if ($data['status'] == PRODUCT_PASSED){
      $status = '<span>'.t('已通过').'</span>';
    }
    else if ($data['status'] == PRODUCT_REFUSED) {
      $status = '<span>'.t('已拒绝').'</span>';
    }
    else if ($data['status'] == PRODUCT_SENT) {
      $status = '<span>'.t('已发出').'</span>';
    }
    $apply_user = user_load($data['uid']);
    $table_row = array(
      $node->title,
      date('Y m d h:i:s', $data['apply_time']),
      $data['count'],
      $product_thumbnail_render,
      $apply_user->name,
      $status);

    if (user_access('approve apply')) {
      $table_row[] = $op;
    }
    if ($data['status'] == PRODUCT_APPLYING) {
      $class = 'simple-class';
    }
    else if ($data['status'] == PRODUCT_REFUSED) {
      $class = 'refused-class';
    }
    else if ($data['status'] == PRODUCT_PASSED) {
      $class = 'passed-class';
    }
    else {
      $class  = 'sent-class';
    }
    $table_rows[] = array('data' => $table_row, 'class' => array($class));
  }
  return theme('table', array('header' => $header, 'rows' => $table_rows));
}

function masterprint_apply_product() {
  global $user;
  $uid = NULL;
  $loaded_user = profile2_load_by_user($user);
  if (isset($user->roles[SALER_ROLE_ID])) {
    $profile_user = $loaded_user['salesman'];
  }
  else if (isset($user->roles[DEALER_ROLE_ID])) {
    $profile_user = $loaded_user['dealer'];
  }
  else {
    $profile_user = NULL;
  }
  //选择出当前客户的产品.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')->propertyCondition('type', 'product');
  if (!user_access('list all products', $user)) {
    $uid = 0;
    //如果是客户销售人员或者经销商 则载入所属客户下的产品
    if (isset($user->roles[SALER_ROLE_ID]) || isset($user->roles[DEALER_ROLE_ID])) {
      if (isset($user->roles[SALER_ROLE_ID])) {
        if ($profile_user->field_salesman_client_owner[LANGUAGE_NONE][0]['target_id']) {
          $uid = $profile_user->field_salesman_client_owner[LANGUAGE_NONE][0]['target_id'];
        }
      }
      else if (isset($user->roles[DEALER_ROLE_ID])) {
        if ($profile_user->field_dealer_client_owner[LANGUAGE_NONE][0]['target_id']) {
          $uid = $profile_user->field_dealer_client_owner[LANGUAGE_NONE][0]['target_id'];
        }
      }
    }
    else if ($user->roles[CLIENT_ROLE_ID]) {
      $uid = $user->uid;
    }
    $query->fieldCondition('field_product_applied_by', 'target_id', $uid, '=');
  }
  $result = $query->execute();

  $address_options = array();
  if ($profile_user) {
    if (user_is_saler($user)) {
      $address_in_user = $profile_user->field_salesman_addresses[LANGUAGE_NONE];
    }
    else {
      $address_in_user = $profile_user->field_address[LANGUAGE_NONE];
    }
    foreach ($address_in_user as $profile_item) {
      $address_options[$profile_item['value']] = $profile_item['value'];
    }
  }
  $nids = array();
  $options = array();
  if (!isset($result['node'])) $result['node'] = array();
  foreach ($result['node'] as $tmp) {
    $nids[] = $tmp->nid;
  }
  $product_nodes = node_load_multiple($nids);
  if (!$product_nodes) $product_nodes = array();
  $product_options = array();
  foreach ($product_nodes as $node) {
    $options[$node->nid] = $node->title;
  }
  $form = array();
  $rows = array();
  foreach ($product_nodes as $product) {
    $product_apply_statictis = product_apply_statictis($product->nid);

    $rows[] = array(
      $product->title,
      get_product_stock_number_value_on_product_list(node_load($product->nid)),
      $product->field_product_min_pack_num[LANGUAGE_NONE][0]['value'],
      $product_apply_statictis['applying']);
  }

  $header = array(t('产品名称'), t('产品库存'), t('产品最小打包数量'), t('正在审核产品量'));
  $product_list_table = theme('table', array('header' => $header, 'rows' => $rows));
  global $user;
  $form['product_list'] = array(
    '#markup' => $product_list_table,
    '#title' => t('您的产品列表'),
  );
  $form['product'] = array(
    '#type' => 'select',
    '#title' => t('选择需要的产品'),
    '#options' => $options,
    '#required' => TRUE,
  );
  $form['product_count'] = array(
    '#type' => 'textfield',
    '#title' => t('申请产品数量'),
    '#default_value' => '0',
    '#maxlength' => 12,
    '#size' => 12,
    '#required' => TRUE,
  );
  $form['apply_uid'] = array(
    '#type' => 'hidden',
    '#default_value' => $user->uid,
  );
  $form['deliver_address'] = array(
    '#type' => 'select',
    '#title' => t('送货地址'),
    '#required' => TRUE,
    '#options' => $address_options,
    '#multiple' => FALSE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('申请产品'),
  );


  return $form;
}

function masterprint_apply_product_validate($form, &$form_state) {
  $count = $form_state['values']['product_count'];
  $product_id = $form_state['values']['product'];
  $node = node_load($product_id);
  $total_count = $node->field_product_count[LANGUAGE_NONE][0]['value'];
  $stock_number = get_product_stock_number_value_on_product_list($node);
  $result = db_query("SELECT SUM(count) as applying_total FROM {product_apply} WHERE status = ? AND product_id = ?", array(PRODUCT_APPLYING, $product_id))->fetchAssoc();
  $applying_total = $result['applying_total'];
  $pack_count = $node->field_product_min_pack_num[LANGUAGE_NONE][0]['value'];
  if (!is_numeric($count)) {
    form_set_error('product_count', t('产品数量必须是数字'));
    return FALSE;
  }
  if (intval($count) <= 0) {
    form_set_error('product_count', t('产品申请数量不小于0个'));
    return FALSE;
  }

  if (intval($count) > $stock_number) {
    form_set_error('product_count', t('当前库存不足,请减少申请数量'));
    return FALSE;
  }
}

//产品的损耗统计
function product_apply_statictis($product_id = 0) {
  $node = node_load($product_id);
  $total_count = $node->field_product_count[LANGUAGE_NONE][0]['value'];
  $result = db_query("SELECT SUM(count) as cost_total FROM {product_apply} WHERE status = ? AND product_id = ?", array(PRODUCT_PASSED ,$product_id))->fetchAssoc();
  $cost_total = $result['cost_total'] ? $result['cost_total']: 0;
  $result = db_query("SELECT SUM(count) as applying_total FROM {product_apply} WHERE status = ? AND product_id = ?", array(PRODUCT_APPLYING, $product_id))->fetchAssoc();
  $applying_total = $result['applying_total'] ? $result['applying_total']: 0;

  return array('total' => $total_count, 'cost' => $cost_total, 'applying' => $applying_total);
}

function masterprint_apply_product_submit($form, &$form_state) {
  $product_id = $form_state['values']['product'];
  $count = $form_state['values']['product_count'];
  $uid = $form_state['values']['apply_uid'];
  $time = time();
  $address_str = $form_state['values']['deliver_address'];
  if ($product_id && $count) {
    $data = array(
      'apply_time' => REQUEST_TIME,
      'uid' => $uid,
      'product_id' => $product_id,
      'count' => $count,
      'address' => $address_str
    );
    $status = drupal_write_record('product_apply', $data);
    $apply_account = user_load($uid);
    $client_account = get_client_account_from_user($apply_account);
    drupal_set_message(t("产品申请成功，请等待您所属客户审核"));

    // drupal_mail(
    //   'masterprint_apply',
    //   'submit_product_apply',
    //   $client_account->mail,
    //   language_default(),
    //   array());

    //然后发送邮件到客户，请求审核通过
    pet_send_mail(submit_product_apply, array('mail' => $client_account->mail, 'uid' => $client_account->uid), array('nid' => $product_id));
  }
}

/**
 * Implementation of hook_permission()
 */
function masterprint_apply_permission() {
  return array(
    'apply product' => array(
      'title' => t('产品申请权限'),
      'description' => t('.'),
    ),
    'approve apply' => array(
      'title' => t('审核产品申请'),
      'description' => t('.'),
    ),
    'list all products' => array(
      'title' => t('查看所有产品'),
    ),
    'view apply' => array(
      'title' => t('查看产品申请'),
    ),
  );
}

function user_is_saler($user) {
  return isset($user->roles[SALER_ROLE_ID]);
}

function user_is_dealer($user) {
  return isset($user->roles[DEALER_ROLE_ID]);
}

function user_is_client($user) {
  return isset($user->roles[CLIENT_ROLE_ID]);
}

function user_is_ae($user) {
  return isset($user->roles[AE_ROLE_ID]);
}

function user_is_admin($user) {
  return isset($user->roles[ADMIN_ROLE_ID]);
}

function get_client_account_from_user($saler_account) {
  $loaded_user = profile2_load_by_user($saler_account);
  if (isset($loaded_user['salesman'])) {
    $client_uid = $loaded_user['salesman']->field_salesman_client_owner[LANGUAGE_NONE][0]['target_id'];
  }
  else if (isset($loaded_user['dealer'])) {
    $client_uid = $loaded_user['dealer']->field_dealer_client_owner[LANGUAGE_NONE][0]['target_id'];
  }

  return user_load($client_uid);
}

/**
 * Impelements hook_mail()
 */
function masterprint_apply_mail($key, &$message, $params) {
  return;
  // 经销商/销售员申请产品时候，发送邮件.
  if ($key == 'submit_product_apply') {
    $message['subject'] = 'Hello world';
    $message['body'][] = 'submit_product_apply';
  }
  // 产品被客户通过后，发送的邮件.
  else if ($key == 'notify_warehouse_manager_when_approve') {
    $message['subject'] = 'Hello world';
    $message['body'][] = '您有新的送货申请，请到下列地址完成发货:'.url('warehousr_manager/'.$params['apply_product']['id'].'/ensure/key', array('absolute' => TRUE));
  }
  //仓库管理员发出产品后，给客户发的邮件
  else if ($key == 'notify_client_when_delivery') {
    $message['subject'] = 'Hello world';
    $message['body'][] = 'notify_client_when_delivery';
  }
  //仓库管理员发出产品后，给产品申请人发的邮件
  else if ($key == 'notify_apply_account_when_delivery') {
    $message['subject'] = 'Hello world';
    $message['body'][] = 'notify_apply_account_when_delivery';
  }
  // 当产品被添加后，发给仓库管理员的邮件
  else if ($key == 'notify_warehouse_when_product_insert') {
    $message['subject'] = 'Hello world';
    $message['body'][] = 'notify_warehouse_when_product_insert';
  }
  // 库存告警的邮件
  else if ($key == 'notify_warning_when_product_less') {
    $message['subject'] = 'Hello world';
    $message['body'][] = 'notify_warning_when_product_less';
  }
}

function list_warehouse_manager() {
  $result = db_select('users_roles', 'ur')
    ->fields('ur')
    ->condition('rid', WAREHOUSE_ROLE_ID, '=')
    ->execute();
  $uids = array();
  while ($row = $result->fetchAssoc()) {
    $uids[] = $row['uid'];
  }
  return $managers = user_load_multiple($uids);
}

function list_ae_account() {
  $result = db_select('users_roles', 'ur')
    ->fields('ur')
    ->condition('rid', AE_ROLE_ID, '=')
    ->execute();
  $uids = array();
  while ($row = $result->fetchAssoc()) {
    $uids[] = $row['uid'];
  }
  return $ae = user_load_multiple($uids);
}
